import os
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator 
from tensorflow.keras.applications import ResNet50
import numpy as np
import matplotlib.pyplot as plt

# Update the class names to your actual classes
class_names = ['Cats', 'Dogs'] 

# Update with your actual path
train_dir = r'C:\Users\LENOVO\PycharmProjects\nn\train' 

# Check if the directory exists
if not os.path.exists(train_dir):
    print(f"Directory {train_dir} does not exist. Please check the path.")
else:
    # Data augmentation and rescaling for the training dataset
    train_datagen = ImageDataGenerator(
        rescale=1./255, 
        rotation_range=40, 
        width_shift_range=0.2, 
        height_shift_range=0.2, 
        shear_range=0.2, 
        zoom_range=0.2, 
        horizontal_flip=True, 
        fill_mode='nearest'
    )

    # Load the training data
    train_generator = train_datagen.flow_from_directory( 
        train_dir,
        target_size=(224, 224), # ResNet50 input size 
        batch_size=32,
        class_mode='categorical'
    )

    # Load the ResNet50 model with pre-trained ImageNet weights, excluding the top layer
    base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

    # Freeze the layers of the base model
    for layer in base_model.layers:
        layer.trainable = False

    # Add custom layers on top of the base model
    x = layers.GlobalAveragePooling2D()(base_model.output) 
    x = layers.Dense(256, activation='relu')(x)
    x = layers.Dropout(0.5)(x)
    predictions = layers.Dense(len(class_names), activation='softmax')(x) 

    # Create the transfer learning model
    transfer_model = models.Model(inputs=base_model.input, outputs=predictions)

    # Compile the model
    transfer_model.compile(
        optimizer='adam',
        loss='categorical_crossentropy', 
        metrics=['accuracy']
    )

    # Print the model summary
    transfer_model.summary()

    print("Training started...")

    # Train the model
    history = transfer_model.fit(train_generator, epochs=10)

    print("Training completed.")
    print("Saving the model...")

    # Save the model
    transfer_model.save(r'C:\Users\LENOVO\PycharmProjects\nn\transfer_learning_resnet50_model.h5')

    print("Model saved successfully.")
    print("Making predictions...")

    # Path to the image to classify
    img_path = r'C:\Users\LENOVO\PycharmProjects\nn\pet.jpg' # Update with the path to the image you want to classify

    # Load and preprocess the image
    img = tf.keras.preprocessing.image.load_img(img_path, target_size=(224, 224)) # Resize image to match the input size expected by ResNet50
    img_array = tf.keras.preprocessing.image.img_to_array(img) 
    img_array = np.expand_dims(img_array, axis=0) 
    img_array /= 255.0 # Normalize pixel values to [0, 1] 

    # Make a prediction
    predictions = transfer_model.predict(img_array)
    predicted_class = np.argmax(predictions[0])
    predicted_class_name = class_names[predicted_class] 

    # Display the image with the predicted class label
    plt.imshow(img)
    plt.axis('off')
    plt.title('Predicted Class: {}'.format(predicted_class_name)) 
    plt.show()

    print("Prediction completed.")
